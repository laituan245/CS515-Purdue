import math

data = '''
0.29676284864420205
0.3271421406638935
0.12243094169073851
0.18799914129641185
0.0626562704287069
0.12257672766473948
0.03429774086443593
0.08779812193004966
0.014379081809994004
0.06723880883842907
0.00540990121884719
0.05366884762420199
0.0016749360262911846
0.04383633719700464
0.0004238864387642509
0.036229759441330965
0.00014163736754632265
0.030106318647769678
3.530803391834967e-5
0.025069143137312018
8.990004753301882e-6
0.020881645880476717
2.132544740492478e-6
0.01738526891765761
7.826299547764524e-7
0.014462631662573505
1.9587826802226592e-7
0.012020689923558155
5.7749417920664754e-8
0.009982728286226029
1.9478274559843576e-8
0.008284259938769536
5.812546804017488e-9
0.006870665766880008
1.2463331424701374e-9
0.005695622845603823
1.978284029309883e-10
0.004719910743086155
2.8659463199883443e-11
0.003910420896878742
3.5883322663414324e-12
0.003239297010080414
3.402284082355363e-13
0.0026831773757850083
3.717928635936949e-14
0.002222526698600695
9.105131353314978e-15
0.0018410504479411715
2.731539405994493e-15
0.001525185850266085
4.552565676657488e-16
0.0012636632916389467
4.552565676657488e-16
0.001047131383547997
2.2762828383287444e-15
0.0008678386705221564
3.186795973660242e-15
0.0007193650087442358
4.09730910899174e-15
0.0005963959689841191
2.4280350275506607e-15
0.0004945341267839613
4.4008134874355725e-15
0.00041014171420728434
2.2762828383287444e-15
0.0003402097547568877
2.579787216772577e-15
0.0002822494402637737
1.8210262706629952e-15
0.00023420210679935823
1.2140175137753303e-15
0.00019436471011044105
2.2762828383287444e-15
0.00016132818306973873
6.221839758098568e-15
0.00013392647765403867
1.3657697029972466e-15
0.00011119445500264607
3.3385481628821583e-15
9.233309434946427e-5
4.4008134874355725e-15
7.668075093042444e-5
3.186795973660242e-15
6.368941053600366e-5
9.105131353314976e-16
5.290507003944773e-5
4.09730910899174e-15
4.395152433005854e-5
1.062265324553414e-15
3.6516965467518873e-5
5.31132662276707e-15
3.0342903645470926e-5
5.159574433545154e-15
2.521500533473938e-5
5.766583190432819e-15
2.095551480115749e-5
8.801626974871145e-15
1.7416983634391936e-5
'''

lines = data.split('\n')
lines = [line.strip() for line in lines if len(line.strip()) > 0]

cts = 0
krylov_errors, power_method_errors = [], []
for line in lines:
    if cts % 2 == 0:
        krylov_errors.append(float(line))
    else:
        power_method_errors.append(float(line))
    cts += 1
assert(len(krylov_errors) == len(power_method_errors))
xs = list(range(1, len(krylov_errors) + 1))

import matplotlib.pyplot as plt
plt.plot(xs, krylov_errors, c='r', label='Proposed Method')
plt.plot(xs, power_method_errors, c='b', label='Power Method');
plt.legend()
plt.title('Convergence plot for the error in the largest eigenvalue')
plt.ylabel('Relative Error')
plt.xlabel('Number Iterations')
plt.show()
